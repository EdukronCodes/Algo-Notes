{"cells":[{"cell_type":"markdown","metadata":{"id":"a722bbe8"},"source":["# Gradient Boosting Regression (e.g., XGBoost, LightGBM)"],"id":"a722bbe8"},{"cell_type":"markdown","source":["<b>1. Overview:</b>\n","\n","Type: Ensemble Learning\n","Objective: Combine weak learners to create a strong predictive model.\n","Key Idea: Sequentially train models to correct errors made by previous models.\n","\n","<b>2. Basic Concept:</b>\n","\n","Ensemble Learning: Combines multiple weak models to create a robust and accurate model.\n","Boosting: Focuses on improving the weaknesses of individual models sequentially.\n","\n","<b>3. Workflow:</b>\n","\n","Initialization: The first base model is trained on the entire dataset.\n","Sequential Training: Subsequent models are trained to correct errors made by the previous models.\n","Weighted Voting: Predictions are made by combining the predictions of all models with different weights.\n","\n","<b>4. Weak Learners:</b>\n","\n","Typically Decision Trees: Often shallow trees (stumps) to capture simple patterns.\n","Each Tree Learns: A fraction of the total signal, focusing on the remaining errors.\n","\n","<b>5. Training Process:</b>\n","\n","Loss Function: Measures the model's error.\n","Gradient Descent: Models are trained to minimize the loss function gradient.\n","\n","<b>6. Hyperparameters:</b>\n","\n","Learning Rate: Controls the contribution of each model to the ensemble.\n","Number of Estimators: Number of models (trees) in the ensemble.\n","Max Depth: Maximum depth of each tree.\n","Subsample: Fraction of samples used for training each tree.\n","\n","<b>7. Features:</b>\n","\n","Handles Different Types: Can handle both numerical and categorical features.\n","Feature Importance: Provides a measure of the impact of each feature on predictions.\n","\n","<b>8. Advantages:</b>\n","\n","High Predictive Power: Can capture complex relationships in data.\n","Robust to Overfitting: Combats overfitting through the ensemble approach.\n","Handles Missing Data: Can handle missing values in features.\n","\n","<b>9. Challenges:</b>\n","\n","Sensitive to Noisy Data: May struggle with noisy datasets.\n","Computationally Intensive: Training multiple trees sequentially can be computationally expensive.\n","\n","<b>10. Use Cases:</b>\n","\n","Regression and Classification Tasks: Commonly used for both regression and classification problems.\n","Diverse Applications: Widely applied in various domains such as finance, healthcare, and marketing.\n","\n","<b>11. Libraries:</b>\n","\n","Popular Implementations: XGBoost, LightGBM, AdaBoost, GradientBoostingRegressor in scikit-learn."],"metadata":{"id":"Yokym_zePghO"},"id":"Yokym_zePghO"},{"cell_type":"markdown","source":["## XGBoost"],"metadata":{"id":"aj_X09r5QIfS"},"id":"aj_X09r5QIfS"},{"cell_type":"markdown","metadata":{"id":"779042a8"},"source":["# Import Packages"],"id":"779042a8"},{"cell_type":"code","execution_count":27,"metadata":{"executionInfo":{"elapsed":352,"status":"ok","timestamp":1700057605664,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"7f026428"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import sklearn.datasets\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.model_selection import train_test_split\n","from sklearn import metrics\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","from sklearn.metrics import r2_score\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","\n"],"id":"7f026428"},{"cell_type":"markdown","metadata":{"id":"e95c1a05"},"source":["## Importing the California House price dataset"],"id":"e95c1a05"},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1700057606080,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"ee73b856","outputId":"c7c9cfa0-bc66-4ae5-9396-dbe55b658676","scrolled":false},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'data': array([[   8.3252    ,   41.        ,    6.98412698, ...,    2.55555556,\n","           37.88      , -122.23      ],\n","        [   8.3014    ,   21.        ,    6.23813708, ...,    2.10984183,\n","           37.86      , -122.22      ],\n","        [   7.2574    ,   52.        ,    8.28813559, ...,    2.80225989,\n","           37.85      , -122.24      ],\n","        ...,\n","        [   1.7       ,   17.        ,    5.20554273, ...,    2.3256351 ,\n","           39.43      , -121.22      ],\n","        [   1.8672    ,   18.        ,    5.32951289, ...,    2.12320917,\n","           39.43      , -121.32      ],\n","        [   2.3886    ,   16.        ,    5.25471698, ...,    2.61698113,\n","           39.37      , -121.24      ]]),\n"," 'target': array([4.526, 3.585, 3.521, ..., 0.923, 0.847, 0.894]),\n"," 'frame': None,\n"," 'target_names': ['MedHouseVal'],\n"," 'feature_names': ['MedInc',\n","  'HouseAge',\n","  'AveRooms',\n","  'AveBedrms',\n","  'Population',\n","  'AveOccup',\n","  'Latitude',\n","  'Longitude'],\n"," 'DESCR': '.. _california_housing_dataset:\\n\\nCalifornia Housing dataset\\n--------------------------\\n\\n**Data Set Characteristics:**\\n\\n    :Number of Instances: 20640\\n\\n    :Number of Attributes: 8 numeric, predictive attributes and the target\\n\\n    :Attribute Information:\\n        - MedInc        median income in block group\\n        - HouseAge      median house age in block group\\n        - AveRooms      average number of rooms per household\\n        - AveBedrms     average number of bedrooms per household\\n        - Population    block group population\\n        - AveOccup      average number of household members\\n        - Latitude      block group latitude\\n        - Longitude     block group longitude\\n\\n    :Missing Attribute Values: None\\n\\nThis dataset was obtained from the StatLib repository.\\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\\n\\nThe target variable is the median house value for California districts,\\nexpressed in hundreds of thousands of dollars ($100,000).\\n\\nThis dataset was derived from the 1990 U.S. census, using one row per census\\nblock group. A block group is the smallest geographical unit for which the U.S.\\nCensus Bureau publishes sample data (a block group typically has a population\\nof 600 to 3,000 people).\\n\\nA household is a group of people residing within a home. Since the average\\nnumber of rooms and bedrooms in this dataset are provided per household, these\\ncolumns may take surprisingly large values for block groups with few households\\nand many empty houses, such as vacation resorts.\\n\\nIt can be downloaded/loaded using the\\n:func:`sklearn.datasets.fetch_california_housing` function.\\n\\n.. topic:: References\\n\\n    - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\\n      Statistics and Probability Letters, 33 (1997) 291-297\\n'}"]},"metadata":{},"execution_count":28}],"source":["from sklearn.datasets import fetch_california_housing\n","california_housing = fetch_california_housing()\n","california_housing\n"],"id":"ee73b856"},{"cell_type":"markdown","source":["## Read the DataFrame, first using the feature data"],"metadata":{"id":"tACmp97sS_Xd"},"id":"tACmp97sS_Xd"},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":685,"status":"ok","timestamp":1700057606747,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"DvVGUgms0Xz1","outputId":"24437613-28a9-47bc-8ce2-22ade3ff5c21"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n","0  8.3252      41.0  6.984127   1.023810       322.0  2.555556     37.88   \n","1  8.3014      21.0  6.238137   0.971880      2401.0  2.109842     37.86   \n","2  7.2574      52.0  8.288136   1.073446       496.0  2.802260     37.85   \n","3  5.6431      52.0  5.817352   1.073059       558.0  2.547945     37.85   \n","4  3.8462      52.0  6.281853   1.081081       565.0  2.181467     37.85   \n","\n","   Longitude  \n","0    -122.23  \n","1    -122.22  \n","2    -122.24  \n","3    -122.25  \n","4    -122.25  "],"text/html":["\n","  <div id=\"df-f64c5481-d4a6-4774-bf46-eaf246cdb7fd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MedInc</th>\n","      <th>HouseAge</th>\n","      <th>AveRooms</th>\n","      <th>AveBedrms</th>\n","      <th>Population</th>\n","      <th>AveOccup</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>8.3252</td>\n","      <td>41.0</td>\n","      <td>6.984127</td>\n","      <td>1.023810</td>\n","      <td>322.0</td>\n","      <td>2.555556</td>\n","      <td>37.88</td>\n","      <td>-122.23</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>8.3014</td>\n","      <td>21.0</td>\n","      <td>6.238137</td>\n","      <td>0.971880</td>\n","      <td>2401.0</td>\n","      <td>2.109842</td>\n","      <td>37.86</td>\n","      <td>-122.22</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7.2574</td>\n","      <td>52.0</td>\n","      <td>8.288136</td>\n","      <td>1.073446</td>\n","      <td>496.0</td>\n","      <td>2.802260</td>\n","      <td>37.85</td>\n","      <td>-122.24</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.6431</td>\n","      <td>52.0</td>\n","      <td>5.817352</td>\n","      <td>1.073059</td>\n","      <td>558.0</td>\n","      <td>2.547945</td>\n","      <td>37.85</td>\n","      <td>-122.25</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.8462</td>\n","      <td>52.0</td>\n","      <td>6.281853</td>\n","      <td>1.081081</td>\n","      <td>565.0</td>\n","      <td>2.181467</td>\n","      <td>37.85</td>\n","      <td>-122.25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f64c5481-d4a6-4774-bf46-eaf246cdb7fd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f64c5481-d4a6-4774-bf46-eaf246cdb7fd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f64c5481-d4a6-4774-bf46-eaf246cdb7fd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9e15edec-943b-4b64-8919-c89d978f9e16\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e15edec-943b-4b64-8919-c89d978f9e16')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9e15edec-943b-4b64-8919-c89d978f9e16 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":29}],"source":["df = pd.DataFrame(california_housing.data, columns=california_housing.feature_names)\n","df.head()"],"id":"DvVGUgms0Xz1"},{"cell_type":"markdown","source":["## Read the DataFrame, add target feature to the dataset -Median house val--in thousnad of dollars"],"metadata":{"id":"0pKK2SJZTDP8"},"id":"0pKK2SJZTDP8"},{"cell_type":"code","execution_count":30,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":54,"status":"ok","timestamp":1700057606748,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"J0L8XlbI1FtY","outputId":"9ecf5fa6-650f-494b-a0e1-600873e59ce2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n","0  8.3252      41.0  6.984127   1.023810       322.0  2.555556     37.88   \n","1  8.3014      21.0  6.238137   0.971880      2401.0  2.109842     37.86   \n","2  7.2574      52.0  8.288136   1.073446       496.0  2.802260     37.85   \n","3  5.6431      52.0  5.817352   1.073059       558.0  2.547945     37.85   \n","4  3.8462      52.0  6.281853   1.081081       565.0  2.181467     37.85   \n","\n","   Longitude  MedHouseVal  \n","0    -122.23        4.526  \n","1    -122.22        3.585  \n","2    -122.24        3.521  \n","3    -122.25        3.413  \n","4    -122.25        3.422  "],"text/html":["\n","  <div id=\"df-f4aed552-b6d5-41fb-8ce9-caa9f29f486e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MedInc</th>\n","      <th>HouseAge</th>\n","      <th>AveRooms</th>\n","      <th>AveBedrms</th>\n","      <th>Population</th>\n","      <th>AveOccup</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>MedHouseVal</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>8.3252</td>\n","      <td>41.0</td>\n","      <td>6.984127</td>\n","      <td>1.023810</td>\n","      <td>322.0</td>\n","      <td>2.555556</td>\n","      <td>37.88</td>\n","      <td>-122.23</td>\n","      <td>4.526</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>8.3014</td>\n","      <td>21.0</td>\n","      <td>6.238137</td>\n","      <td>0.971880</td>\n","      <td>2401.0</td>\n","      <td>2.109842</td>\n","      <td>37.86</td>\n","      <td>-122.22</td>\n","      <td>3.585</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7.2574</td>\n","      <td>52.0</td>\n","      <td>8.288136</td>\n","      <td>1.073446</td>\n","      <td>496.0</td>\n","      <td>2.802260</td>\n","      <td>37.85</td>\n","      <td>-122.24</td>\n","      <td>3.521</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.6431</td>\n","      <td>52.0</td>\n","      <td>5.817352</td>\n","      <td>1.073059</td>\n","      <td>558.0</td>\n","      <td>2.547945</td>\n","      <td>37.85</td>\n","      <td>-122.25</td>\n","      <td>3.413</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.8462</td>\n","      <td>52.0</td>\n","      <td>6.281853</td>\n","      <td>1.081081</td>\n","      <td>565.0</td>\n","      <td>2.181467</td>\n","      <td>37.85</td>\n","      <td>-122.25</td>\n","      <td>3.422</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4aed552-b6d5-41fb-8ce9-caa9f29f486e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f4aed552-b6d5-41fb-8ce9-caa9f29f486e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f4aed552-b6d5-41fb-8ce9-caa9f29f486e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e9795cd8-05d0-49fe-bc21-8d35eb06a964\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e9795cd8-05d0-49fe-bc21-8d35eb06a964')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e9795cd8-05d0-49fe-bc21-8d35eb06a964 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":30}],"source":["df['MedHouseVal']=california_housing.target\n","df.head()"],"id":"J0L8XlbI1FtY"},{"cell_type":"markdown","source":["## Checking the shape of Dataframe"],"metadata":{"id":"3faO2MKtTHYN"},"id":"3faO2MKtTHYN"},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":49,"status":"ok","timestamp":1700057606749,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"GJy3cS_iA4XL","outputId":"797568fc-80cf-4b88-f095-356496dc68ff"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(20640, 9)"]},"metadata":{},"execution_count":31}],"source":["df.shape\n","\n","## it has 20640 rows and 9 columns"],"id":"GJy3cS_iA4XL"},{"cell_type":"markdown","source":["## Check for missing values"],"metadata":{"id":"oSv60BMfTM7W"},"id":"oSv60BMfTM7W"},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":44,"status":"ok","timestamp":1700057606749,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"LnYtcWlh3OF-","outputId":"145cccdd-1918-4f07-f425-b024ab1efcb4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["MedInc         0\n","HouseAge       0\n","AveRooms       0\n","AveBedrms      0\n","Population     0\n","AveOccup       0\n","Latitude       0\n","Longitude      0\n","MedHouseVal    0\n","dtype: int64"]},"metadata":{},"execution_count":32}],"source":["df.isna().sum()\n","\n","### No null value present"],"id":"LnYtcWlh3OF-"},{"cell_type":"markdown","source":["## Statistical measure of the dataset"],"metadata":{"id":"qqSlyuTLTQLN"},"id":"qqSlyuTLTQLN"},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"elapsed":37,"status":"ok","timestamp":1700057606750,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"B6a7WWvtA_0Z","outputId":"eeb11f0f-cb99-419c-c92c-90ebfeec8d8c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["             MedInc      HouseAge      AveRooms     AveBedrms    Population  \\\n","count  20640.000000  20640.000000  20640.000000  20640.000000  20640.000000   \n","mean       3.870671     28.639486      5.429000      1.096675   1425.476744   \n","std        1.899822     12.585558      2.474173      0.473911   1132.462122   \n","min        0.499900      1.000000      0.846154      0.333333      3.000000   \n","25%        2.563400     18.000000      4.440716      1.006079    787.000000   \n","50%        3.534800     29.000000      5.229129      1.048780   1166.000000   \n","75%        4.743250     37.000000      6.052381      1.099526   1725.000000   \n","max       15.000100     52.000000    141.909091     34.066667  35682.000000   \n","\n","           AveOccup      Latitude     Longitude   MedHouseVal  \n","count  20640.000000  20640.000000  20640.000000  20640.000000  \n","mean       3.070655     35.631861   -119.569704      2.068558  \n","std       10.386050      2.135952      2.003532      1.153956  \n","min        0.692308     32.540000   -124.350000      0.149990  \n","25%        2.429741     33.930000   -121.800000      1.196000  \n","50%        2.818116     34.260000   -118.490000      1.797000  \n","75%        3.282261     37.710000   -118.010000      2.647250  \n","max     1243.333333     41.950000   -114.310000      5.000010  "],"text/html":["\n","  <div id=\"df-142fd393-0ad1-426e-a7c7-6e23a0eaeaa0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MedInc</th>\n","      <th>HouseAge</th>\n","      <th>AveRooms</th>\n","      <th>AveBedrms</th>\n","      <th>Population</th>\n","      <th>AveOccup</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>MedHouseVal</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>3.870671</td>\n","      <td>28.639486</td>\n","      <td>5.429000</td>\n","      <td>1.096675</td>\n","      <td>1425.476744</td>\n","      <td>3.070655</td>\n","      <td>35.631861</td>\n","      <td>-119.569704</td>\n","      <td>2.068558</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.899822</td>\n","      <td>12.585558</td>\n","      <td>2.474173</td>\n","      <td>0.473911</td>\n","      <td>1132.462122</td>\n","      <td>10.386050</td>\n","      <td>2.135952</td>\n","      <td>2.003532</td>\n","      <td>1.153956</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.499900</td>\n","      <td>1.000000</td>\n","      <td>0.846154</td>\n","      <td>0.333333</td>\n","      <td>3.000000</td>\n","      <td>0.692308</td>\n","      <td>32.540000</td>\n","      <td>-124.350000</td>\n","      <td>0.149990</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2.563400</td>\n","      <td>18.000000</td>\n","      <td>4.440716</td>\n","      <td>1.006079</td>\n","      <td>787.000000</td>\n","      <td>2.429741</td>\n","      <td>33.930000</td>\n","      <td>-121.800000</td>\n","      <td>1.196000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>3.534800</td>\n","      <td>29.000000</td>\n","      <td>5.229129</td>\n","      <td>1.048780</td>\n","      <td>1166.000000</td>\n","      <td>2.818116</td>\n","      <td>34.260000</td>\n","      <td>-118.490000</td>\n","      <td>1.797000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>4.743250</td>\n","      <td>37.000000</td>\n","      <td>6.052381</td>\n","      <td>1.099526</td>\n","      <td>1725.000000</td>\n","      <td>3.282261</td>\n","      <td>37.710000</td>\n","      <td>-118.010000</td>\n","      <td>2.647250</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>15.000100</td>\n","      <td>52.000000</td>\n","      <td>141.909091</td>\n","      <td>34.066667</td>\n","      <td>35682.000000</td>\n","      <td>1243.333333</td>\n","      <td>41.950000</td>\n","      <td>-114.310000</td>\n","      <td>5.000010</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-142fd393-0ad1-426e-a7c7-6e23a0eaeaa0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-142fd393-0ad1-426e-a7c7-6e23a0eaeaa0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-142fd393-0ad1-426e-a7c7-6e23a0eaeaa0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bc3756fa-771c-4778-8aec-dde0e8e330c2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bc3756fa-771c-4778-8aec-dde0e8e330c2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bc3756fa-771c-4778-8aec-dde0e8e330c2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":33}],"source":["df.describe()"],"id":"B6a7WWvtA_0Z"},{"cell_type":"markdown","source":["## Understanding the correlation between various features of dataset (Mainly measured wrt 'target variable')"],"metadata":{"id":"daP6Cw9sTXhZ"},"id":"daP6Cw9sTXhZ"},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":331},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1700057606750,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"wzJsVSVQ-ZGJ","outputId":"2c0e7b7c-db35-4ccf-e441-cbb797de16e9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["               MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  \\\n","MedInc       1.000000 -0.119034  0.326895  -0.062040    0.004834  0.018766   \n","HouseAge    -0.119034  1.000000 -0.153277  -0.077747   -0.296244  0.013191   \n","AveRooms     0.326895 -0.153277  1.000000   0.847621   -0.072213 -0.004852   \n","AveBedrms   -0.062040 -0.077747  0.847621   1.000000   -0.066197 -0.006181   \n","Population   0.004834 -0.296244 -0.072213  -0.066197    1.000000  0.069863   \n","AveOccup     0.018766  0.013191 -0.004852  -0.006181    0.069863  1.000000   \n","Latitude    -0.079809  0.011173  0.106389   0.069721   -0.108785  0.002366   \n","Longitude   -0.015176 -0.108197 -0.027540   0.013344    0.099773  0.002476   \n","MedHouseVal  0.688075  0.105623  0.151948  -0.046701   -0.024650 -0.023737   \n","\n","             Latitude  Longitude  MedHouseVal  \n","MedInc      -0.079809  -0.015176     0.688075  \n","HouseAge     0.011173  -0.108197     0.105623  \n","AveRooms     0.106389  -0.027540     0.151948  \n","AveBedrms    0.069721   0.013344    -0.046701  \n","Population  -0.108785   0.099773    -0.024650  \n","AveOccup     0.002366   0.002476    -0.023737  \n","Latitude     1.000000  -0.924664    -0.144160  \n","Longitude   -0.924664   1.000000    -0.045967  \n","MedHouseVal -0.144160  -0.045967     1.000000  "],"text/html":["\n","  <div id=\"df-f1d00a54-0d54-40ed-bae6-82dae1a3134a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MedInc</th>\n","      <th>HouseAge</th>\n","      <th>AveRooms</th>\n","      <th>AveBedrms</th>\n","      <th>Population</th>\n","      <th>AveOccup</th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>MedHouseVal</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>MedInc</th>\n","      <td>1.000000</td>\n","      <td>-0.119034</td>\n","      <td>0.326895</td>\n","      <td>-0.062040</td>\n","      <td>0.004834</td>\n","      <td>0.018766</td>\n","      <td>-0.079809</td>\n","      <td>-0.015176</td>\n","      <td>0.688075</td>\n","    </tr>\n","    <tr>\n","      <th>HouseAge</th>\n","      <td>-0.119034</td>\n","      <td>1.000000</td>\n","      <td>-0.153277</td>\n","      <td>-0.077747</td>\n","      <td>-0.296244</td>\n","      <td>0.013191</td>\n","      <td>0.011173</td>\n","      <td>-0.108197</td>\n","      <td>0.105623</td>\n","    </tr>\n","    <tr>\n","      <th>AveRooms</th>\n","      <td>0.326895</td>\n","      <td>-0.153277</td>\n","      <td>1.000000</td>\n","      <td>0.847621</td>\n","      <td>-0.072213</td>\n","      <td>-0.004852</td>\n","      <td>0.106389</td>\n","      <td>-0.027540</td>\n","      <td>0.151948</td>\n","    </tr>\n","    <tr>\n","      <th>AveBedrms</th>\n","      <td>-0.062040</td>\n","      <td>-0.077747</td>\n","      <td>0.847621</td>\n","      <td>1.000000</td>\n","      <td>-0.066197</td>\n","      <td>-0.006181</td>\n","      <td>0.069721</td>\n","      <td>0.013344</td>\n","      <td>-0.046701</td>\n","    </tr>\n","    <tr>\n","      <th>Population</th>\n","      <td>0.004834</td>\n","      <td>-0.296244</td>\n","      <td>-0.072213</td>\n","      <td>-0.066197</td>\n","      <td>1.000000</td>\n","      <td>0.069863</td>\n","      <td>-0.108785</td>\n","      <td>0.099773</td>\n","      <td>-0.024650</td>\n","    </tr>\n","    <tr>\n","      <th>AveOccup</th>\n","      <td>0.018766</td>\n","      <td>0.013191</td>\n","      <td>-0.004852</td>\n","      <td>-0.006181</td>\n","      <td>0.069863</td>\n","      <td>1.000000</td>\n","      <td>0.002366</td>\n","      <td>0.002476</td>\n","      <td>-0.023737</td>\n","    </tr>\n","    <tr>\n","      <th>Latitude</th>\n","      <td>-0.079809</td>\n","      <td>0.011173</td>\n","      <td>0.106389</td>\n","      <td>0.069721</td>\n","      <td>-0.108785</td>\n","      <td>0.002366</td>\n","      <td>1.000000</td>\n","      <td>-0.924664</td>\n","      <td>-0.144160</td>\n","    </tr>\n","    <tr>\n","      <th>Longitude</th>\n","      <td>-0.015176</td>\n","      <td>-0.108197</td>\n","      <td>-0.027540</td>\n","      <td>0.013344</td>\n","      <td>0.099773</td>\n","      <td>0.002476</td>\n","      <td>-0.924664</td>\n","      <td>1.000000</td>\n","      <td>-0.045967</td>\n","    </tr>\n","    <tr>\n","      <th>MedHouseVal</th>\n","      <td>0.688075</td>\n","      <td>0.105623</td>\n","      <td>0.151948</td>\n","      <td>-0.046701</td>\n","      <td>-0.024650</td>\n","      <td>-0.023737</td>\n","      <td>-0.144160</td>\n","      <td>-0.045967</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f1d00a54-0d54-40ed-bae6-82dae1a3134a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f1d00a54-0d54-40ed-bae6-82dae1a3134a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f1d00a54-0d54-40ed-bae6-82dae1a3134a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f543202c-e277-48a7-a77f-ed0e9ce1697b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f543202c-e277-48a7-a77f-ed0e9ce1697b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f543202c-e277-48a7-a77f-ed0e9ce1697b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":34}],"source":["correlation=df.corr()\n","correlation"],"id":"wzJsVSVQ-ZGJ"},{"cell_type":"markdown","source":["### Constructing the heatmap to understand it more better"],"metadata":{"id":"vqS63HuHTcGM"},"id":"vqS63HuHTcGM"},{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":510},"executionInfo":{"elapsed":1197,"status":"ok","timestamp":1700058121313,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"RqXcRUAu-_Fw","outputId":"fceb1fbe-71dc-4cd3-d327-84a40d454560"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":45},{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(5,5))\n","sns.heatmap(correlation, cbar=True, square=True, annot=True, annot_kws={'size':8}, fmt='0.1f', cmap='Blues' )"],"id":"RqXcRUAu-_Fw"},{"cell_type":"markdown","source":["## Split other features from target varible, feed them separately to machine learning model to undestand the pattern.\n"],"metadata":{"id":"TIBLJkceTi7-"},"id":"TIBLJkceTi7-"},{"cell_type":"code","execution_count":36,"metadata":{"executionInfo":{"elapsed":37,"status":"ok","timestamp":1700057608142,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"-MmpG0IYJz3r"},"outputs":[],"source":["x=df.drop('MedHouseVal', axis=1)\n","y=df['MedHouseVal']"],"id":"-MmpG0IYJz3r"},{"cell_type":"markdown","source":["## Splitting the data into training and test data"],"metadata":{"id":"eHsQccrsUc2x"},"id":"eHsQccrsUc2x"},{"cell_type":"code","execution_count":37,"metadata":{"executionInfo":{"elapsed":35,"status":"ok","timestamp":1700057608142,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"SCB0qH3_da06"},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=10)"],"id":"SCB0qH3_da06"},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1700057608142,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"fa9ba239","outputId":"e4f166b8-2ee9-4043-ee40-100308e48442"},"outputs":[{"output_type":"stream","name":"stdout","text":["(16512, 8) (4128, 8) (16512,) (4128,)\n"]}],"source":["print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)"],"id":"fa9ba239"},{"cell_type":"markdown","source":["## Model Building and predition on 'training data'\n","### n_estimators is the number of trees (weak learners) that we want to add in the model.\n","### Max_depth- The number of splits that each decision tree is allowed to make.\n","### learning_rate- It contributes to the weights of weak learners, default value is 1."],"metadata":{"id":"UxB6tCQvUjxp"},"id":"UxB6tCQvUjxp"},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1700057608142,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"ceabffc7","outputId":"7cc3d5a5-4df1-4671-8ebb-c971c0f059bb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2.90731853, 2.90660005, 2.90660005, ..., 1.6434109 , 1.32453175,\n","       4.20077629])"]},"metadata":{},"execution_count":39}],"source":["gbr=GradientBoostingRegressor(max_depth=2, n_estimators=3, learning_rate=1)\n","\n","gbr.fit(x_train,y_train)\n","y_test_pred=gbr.predict(x_test)\n","y_test_pred"],"id":"ceabffc7"},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1700057608143,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"kockGshUw9OR","outputId":"5a384ef6-1502-41dd-c43b-4ec4c8e9dbec"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.2897620468285804"]},"metadata":{},"execution_count":40}],"source":["r2_score(y_test_pred,y_test)"],"id":"kockGshUw9OR"},{"cell_type":"markdown","source":["### feature_importance"],"metadata":{"id":"Mvd8JJqEU4RO"},"id":"Mvd8JJqEU4RO"},{"cell_type":"code","execution_count":41,"metadata":{"executionInfo":{"elapsed":15,"status":"ok","timestamp":1700057608143,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"NQf6ep_pw9WW"},"outputs":[],"source":["from sklearn.pipeline import Pipeline"],"id":"NQf6ep_pw9WW"},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1700057608143,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"},"user_tz":-330},"id":"Ri2rx3GIw9Yd","outputId":"be201c06-4c7e-4ff7-973c-ca7352af441f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["MedInc        0.755225\n","AveOccup      0.105472\n","Longitude     0.072750\n","Latitude      0.066554\n","HouseAge      0.000000\n","AveRooms      0.000000\n","AveBedrms     0.000000\n","Population    0.000000\n","dtype: float64"]},"metadata":{},"execution_count":42}],"source":["f_list=list(x.columns)\n","f_importance=pd.Series(gbr.feature_importances_,index=f_list).sort_values(ascending=False)\n","f_importance\n"],"id":"Ri2rx3GIw9Yd"},{"cell_type":"markdown","source":["## Tuning of hyperparameters"],"metadata":{"id":"SzHCDNj3U9u6"},"id":"SzHCDNj3U9u6"},{"cell_type":"code","execution_count":43,"metadata":{"id":"9IRQqmrmw9ar","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1700058120144,"user_tz":-330,"elapsed":512014,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"}},"outputId":"bdf4a9af-cc92-4337-afd8-5f9023f1ca2f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["({'learning_rate': 0.15, 'n_estimators': 250}, 0.8211617961686445)"]},"metadata":{},"execution_count":43}],"source":["from sklearn.model_selection import GridSearchCV\n","LR={'learning_rate':[0.15,0.1,0.10,0.05], 'n_estimators':[100,150,200,250]}\n","\n","tuning=GridSearchCV(estimator=GradientBoostingRegressor(),param_grid=LR, scoring='r2')\n","tuning.fit(x_train,y_train)\n","\n","tuning.best_params_,tuning.best_score_"],"id":"9IRQqmrmw9ar"},{"cell_type":"markdown","source":["## Model Building and predition on new hyperparameters"],"metadata":{"id":"1ZcjYv3HXNhF"},"id":"1ZcjYv3HXNhF"},{"cell_type":"code","execution_count":46,"metadata":{"id":"YQLy-71ww9jl","executionInfo":{"status":"ok","timestamp":1700058424943,"user_tz":-330,"elapsed":7116,"user":{"displayName":"Eisha Akanskha","userId":"01502528335957365622"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ed660d14-5e57-4555-cbb0-505bcce8df00"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2.48919087, 3.40040189, 2.86077777, ..., 1.51187761, 1.12944999,\n","       4.21634232])"]},"metadata":{},"execution_count":46}],"source":["gbr=GradientBoostingRegressor(max_depth=2, n_estimators=230, learning_rate=0.15)\n","gbr.fit(x_train,y_train)\n","y_test_pred=gbr.predict(x_test)\n","y_test_pred\n","\n","## So these are the'prices in dollars' predicted by our \"Linear Regression Model\" for x_train dataset"],"id":"YQLy-71ww9jl"}],"metadata":{"colab":{"provenance":[{"file_id":"1uHCNkC7azwixNaTUfzwc9byrnEW4VAIT","timestamp":1696574295254}]},"hide_input":false,"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false}},"nbformat":4,"nbformat_minor":5}